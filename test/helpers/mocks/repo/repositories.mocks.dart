// Mocks generated by Mockito 5.4.2 from annotations
// in screen_pal/test/helpers/mocks/repo/repositories.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:screen_pal/core/entities/movies/movie.dart' as _i6;
import 'package:screen_pal/core/entities/movies/movie_collection_detail.dart'
    as _i3;
import 'package:screen_pal/core/entities/movies/movie_detail.dart' as _i2;
import 'package:screen_pal/core/repo/movies_repo.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieDetail_0 extends _i1.SmartFake implements _i2.MovieDetail {
  _FakeMovieDetail_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieCollectionDetail_1 extends _i1.SmartFake
    implements _i3.MovieCollectionDetail {
  _FakeMovieCollectionDetail_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MoviesRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesRepo extends _i1.Mock implements _i4.MoviesRepo {
  MockMoviesRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i6.Movie>> getNowPlayingMovies() => (super.noSuchMethod(
        Invocation.method(
          #getNowPlayingMovies,
          [],
        ),
        returnValue: _i5.Future<List<_i6.Movie>>.value(<_i6.Movie>[]),
      ) as _i5.Future<List<_i6.Movie>>);
  @override
  _i5.Future<List<_i6.Movie>> getPopularMovies() => (super.noSuchMethod(
        Invocation.method(
          #getPopularMovies,
          [],
        ),
        returnValue: _i5.Future<List<_i6.Movie>>.value(<_i6.Movie>[]),
      ) as _i5.Future<List<_i6.Movie>>);
  @override
  _i5.Future<List<_i6.Movie>> getTopRatedMovies() => (super.noSuchMethod(
        Invocation.method(
          #getTopRatedMovies,
          [],
        ),
        returnValue: _i5.Future<List<_i6.Movie>>.value(<_i6.Movie>[]),
      ) as _i5.Future<List<_i6.Movie>>);
  @override
  _i5.Future<List<_i6.Movie>> getUpcomingMovies() => (super.noSuchMethod(
        Invocation.method(
          #getUpcomingMovies,
          [],
        ),
        returnValue: _i5.Future<List<_i6.Movie>>.value(<_i6.Movie>[]),
      ) as _i5.Future<List<_i6.Movie>>);
  @override
  _i5.Future<_i2.MovieDetail> getMovieDetail(int? movieId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieDetail,
          [movieId],
        ),
        returnValue: _i5.Future<_i2.MovieDetail>.value(_FakeMovieDetail_0(
          this,
          Invocation.method(
            #getMovieDetail,
            [movieId],
          ),
        )),
      ) as _i5.Future<_i2.MovieDetail>);
  @override
  _i5.Future<List<_i6.Movie>> getRecommendations(int? movieId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecommendations,
          [movieId],
        ),
        returnValue: _i5.Future<List<_i6.Movie>>.value(<_i6.Movie>[]),
      ) as _i5.Future<List<_i6.Movie>>);
  @override
  _i5.Future<_i3.MovieCollectionDetail> getMovieCollectionDetail(
          int? collectionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieCollectionDetail,
          [collectionId],
        ),
        returnValue: _i5.Future<_i3.MovieCollectionDetail>.value(
            _FakeMovieCollectionDetail_1(
          this,
          Invocation.method(
            #getMovieCollectionDetail,
            [collectionId],
          ),
        )),
      ) as _i5.Future<_i3.MovieCollectionDetail>);
}
