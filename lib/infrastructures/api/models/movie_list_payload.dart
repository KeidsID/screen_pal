// Generated by https://quicktype.io

import 'dart:convert';

import 'package:screen_pal/core/entities/movie.dart';

class MovieListResBody {
  final Dates dates;
  final int page;
  final List<RawMovie> results;
  final int totalPages;
  final int totalResults;

  MovieListResBody({
    required this.dates,
    required this.page,
    required this.results,
    required this.totalPages,
    required this.totalResults,
  });

  factory MovieListResBody.fromJson(String str) {
    return MovieListResBody.fromMap(json.decode(str));
  }

  factory MovieListResBody.fromMap(Map<String, dynamic> json) {
    return MovieListResBody(
      dates: Dates.fromMap(json["dates"]),
      page: json["page"],
      results: List<RawMovie>.from(json["results"].map((x) {
        return RawMovie.fromMap(x);
      })),
      totalPages: json["total_pages"],
      totalResults: json["total_results"],
    );
  }
}

class Dates {
  final DateTime maximum;
  final DateTime minimum;

  Dates({
    required this.maximum,
    required this.minimum,
  });

  factory Dates.fromJson(String str) => Dates.fromMap(json.decode(str));

  factory Dates.fromMap(Map<String, dynamic> json) {
    return Dates(
      maximum: DateTime.parse(json["maximum"]),
      minimum: DateTime.parse(json["minimum"]),
    );
  }
}

class RawMovie {
  final bool adult;
  final String backdropPath;
  final List<int> genreIds;
  final int id;
  final String originalLanguage;
  final String originalTitle;
  final String overview;
  final double popularity;
  final String posterPath;
  final DateTime releaseDate;
  final String title;
  final bool video;
  final double voteAverage;
  final int voteCount;

  RawMovie({
    required this.adult,
    required this.backdropPath,
    required this.genreIds,
    required this.id,
    required this.originalLanguage,
    required this.originalTitle,
    required this.overview,
    required this.popularity,
    required this.posterPath,
    required this.releaseDate,
    required this.title,
    required this.video,
    required this.voteAverage,
    required this.voteCount,
  });

  factory RawMovie.fromJson(String str) => RawMovie.fromMap(json.decode(str));

  factory RawMovie.fromMap(Map<String, dynamic> json) {
    return RawMovie(
      adult: json["adult"],
      backdropPath: json["backdrop_path"],
      genreIds: List<int>.from(json["genre_ids"].map((x) => x)),
      id: json["id"],
      originalLanguage: json["original_language"],
      originalTitle: json["original_title"],
      overview: json["overview"],
      popularity: json["popularity"]?.toDouble(),
      posterPath: json["poster_path"],
      releaseDate: DateTime.parse(json["release_date"]),
      title: json["title"],
      video: json["video"],
      voteAverage: json["vote_average"]?.toDouble(),
      voteCount: json["vote_count"],
    );
  }

  Movie toEntity() {
    return Movie(
      adult: adult,
      originalTitle: originalTitle,
      id: id,
      overview: overview,
      popularity: popularity,
      posterPath: posterPath,
      releaseDate: releaseDate,
      title: title,
      voteAverage: voteAverage,
      voteCount: voteCount,
    );
  }
}
